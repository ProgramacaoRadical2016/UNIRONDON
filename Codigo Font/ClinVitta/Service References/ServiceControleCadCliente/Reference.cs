//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace ClinVitta.ServiceControleCadCliente {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceControleCadCliente.ControleDb_CadastroClienteSoap")]
    public interface ControleDb_CadastroClienteSoap {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IncluirCadastroClienteCabecalho", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginIncluirCadastroClienteCabecalho(
                    string CODPACIENTE, 
                    string NOME, 
                    string CPF, 
                    string RG, 
                    string EMISSOR, 
                    string UF_EMISSAO, 
                    string SEXO, 
                    string ESTADO_CIVIL, 
                    string NOME_MAE, 
                    string NOME_PAI, 
                    string UF, 
                    string CIDADE, 
                    string DT_EMISSAO, 
                    string BAIRRO, 
                    string PONTO_REFERENCIA, 
                    string TIPO_LOGRADOURO, 
                    string END_NUM, 
                    string DESC_LOGRADOURO, 
                    string USER_CADASTRO, 
                    string EMAIL, 
                    string TIPO_DOC, 
                    string QT_DEPENDENTES, 
                    string FILIAL_CAD, 
                    string DATA_NASCIMENTO, 
                    string PROFISSAO, 
                    string CEP, 
                    string DTCADASTRO, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        int EndIncluirCadastroClienteCabecalho(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/AlterarCadastroClienteCabecalho", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginAlterarCadastroClienteCabecalho(
                    string CODPACIENTE, 
                    string NOME, 
                    string CPF, 
                    string RG, 
                    string EMISSOR, 
                    string UF_EMISSAO, 
                    string SEXO, 
                    string ESTADO_CIVIL, 
                    string NOME_MAE, 
                    string NOME_PAI, 
                    string UF, 
                    string CIDADE, 
                    string DT_EMISSAO, 
                    string BAIRRO, 
                    string PONTO_REFERENCIA, 
                    string TIPO_LOGRADOURO, 
                    string END_NUM, 
                    string DESC_LOGRADOURO, 
                    string USER_CADASTRO, 
                    string EMAIL, 
                    string TIPO_DOC, 
                    string QT_DEPENDENTES, 
                    string FILIAL_CAD, 
                    string DATA_NASCIMENTO, 
                    string PROFISSAO, 
                    string CEP, 
                    string DTCADASTRO, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        int EndAlterarCadastroClienteCabecalho(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ExcluirCadastroCliente", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginExcluirCadastroCliente(string CODPACIENTE, System.AsyncCallback callback, object asyncState);
        
        void EndExcluirCadastroCliente(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/incluir_TELEFONE", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult Beginincluir_TELEFONE(string TELCODPACIENTE, string TIPO, string DDD, string NUMERO, System.AsyncCallback callback, object asyncState);
        
        int Endincluir_TELEFONE(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/Alterar_TELEFONE", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginAlterar_TELEFONE(string CODPACIENTE, string TIPO, string DDD, string NUMERO, System.AsyncCallback callback, object asyncState);
        
        int EndAlterar_TELEFONE(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/EXCLUIR_TELEFONE", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginEXCLUIR_TELEFONE(string CODPACIENTE, System.AsyncCallback callback, object asyncState);
        
        int EndEXCLUIR_TELEFONE(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ControleDb_CadastroClienteSoapChannel : ClinVitta.ServiceControleCadCliente.ControleDb_CadastroClienteSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IncluirCadastroClienteCabecalhoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IncluirCadastroClienteCabecalhoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AlterarCadastroClienteCabecalhoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AlterarCadastroClienteCabecalhoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class incluir_TELEFONECompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public incluir_TELEFONECompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Alterar_TELEFONECompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Alterar_TELEFONECompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EXCLUIR_TELEFONECompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EXCLUIR_TELEFONECompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ControleDb_CadastroClienteSoapClient : System.ServiceModel.ClientBase<ClinVitta.ServiceControleCadCliente.ControleDb_CadastroClienteSoap>, ClinVitta.ServiceControleCadCliente.ControleDb_CadastroClienteSoap {
        
        private BeginOperationDelegate onBeginIncluirCadastroClienteCabecalhoDelegate;
        
        private EndOperationDelegate onEndIncluirCadastroClienteCabecalhoDelegate;
        
        private System.Threading.SendOrPostCallback onIncluirCadastroClienteCabecalhoCompletedDelegate;
        
        private BeginOperationDelegate onBeginAlterarCadastroClienteCabecalhoDelegate;
        
        private EndOperationDelegate onEndAlterarCadastroClienteCabecalhoDelegate;
        
        private System.Threading.SendOrPostCallback onAlterarCadastroClienteCabecalhoCompletedDelegate;
        
        private BeginOperationDelegate onBeginExcluirCadastroClienteDelegate;
        
        private EndOperationDelegate onEndExcluirCadastroClienteDelegate;
        
        private System.Threading.SendOrPostCallback onExcluirCadastroClienteCompletedDelegate;
        
        private BeginOperationDelegate onBeginincluir_TELEFONEDelegate;
        
        private EndOperationDelegate onEndincluir_TELEFONEDelegate;
        
        private System.Threading.SendOrPostCallback onincluir_TELEFONECompletedDelegate;
        
        private BeginOperationDelegate onBeginAlterar_TELEFONEDelegate;
        
        private EndOperationDelegate onEndAlterar_TELEFONEDelegate;
        
        private System.Threading.SendOrPostCallback onAlterar_TELEFONECompletedDelegate;
        
        private BeginOperationDelegate onBeginEXCLUIR_TELEFONEDelegate;
        
        private EndOperationDelegate onEndEXCLUIR_TELEFONEDelegate;
        
        private System.Threading.SendOrPostCallback onEXCLUIR_TELEFONECompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ControleDb_CadastroClienteSoapClient() {
        }
        
        public ControleDb_CadastroClienteSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ControleDb_CadastroClienteSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ControleDb_CadastroClienteSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ControleDb_CadastroClienteSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<IncluirCadastroClienteCabecalhoCompletedEventArgs> IncluirCadastroClienteCabecalhoCompleted;
        
        public event System.EventHandler<AlterarCadastroClienteCabecalhoCompletedEventArgs> AlterarCadastroClienteCabecalhoCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ExcluirCadastroClienteCompleted;
        
        public event System.EventHandler<incluir_TELEFONECompletedEventArgs> incluir_TELEFONECompleted;
        
        public event System.EventHandler<Alterar_TELEFONECompletedEventArgs> Alterar_TELEFONECompleted;
        
        public event System.EventHandler<EXCLUIR_TELEFONECompletedEventArgs> EXCLUIR_TELEFONECompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClinVitta.ServiceControleCadCliente.ControleDb_CadastroClienteSoap.BeginIncluirCadastroClienteCabecalho(
                    string CODPACIENTE, 
                    string NOME, 
                    string CPF, 
                    string RG, 
                    string EMISSOR, 
                    string UF_EMISSAO, 
                    string SEXO, 
                    string ESTADO_CIVIL, 
                    string NOME_MAE, 
                    string NOME_PAI, 
                    string UF, 
                    string CIDADE, 
                    string DT_EMISSAO, 
                    string BAIRRO, 
                    string PONTO_REFERENCIA, 
                    string TIPO_LOGRADOURO, 
                    string END_NUM, 
                    string DESC_LOGRADOURO, 
                    string USER_CADASTRO, 
                    string EMAIL, 
                    string TIPO_DOC, 
                    string QT_DEPENDENTES, 
                    string FILIAL_CAD, 
                    string DATA_NASCIMENTO, 
                    string PROFISSAO, 
                    string CEP, 
                    string DTCADASTRO, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginIncluirCadastroClienteCabecalho(CODPACIENTE, NOME, CPF, RG, EMISSOR, UF_EMISSAO, SEXO, ESTADO_CIVIL, NOME_MAE, NOME_PAI, UF, CIDADE, DT_EMISSAO, BAIRRO, PONTO_REFERENCIA, TIPO_LOGRADOURO, END_NUM, DESC_LOGRADOURO, USER_CADASTRO, EMAIL, TIPO_DOC, QT_DEPENDENTES, FILIAL_CAD, DATA_NASCIMENTO, PROFISSAO, CEP, DTCADASTRO, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int ClinVitta.ServiceControleCadCliente.ControleDb_CadastroClienteSoap.EndIncluirCadastroClienteCabecalho(System.IAsyncResult result) {
            return base.Channel.EndIncluirCadastroClienteCabecalho(result);
        }
        
        private System.IAsyncResult OnBeginIncluirCadastroClienteCabecalho(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string CODPACIENTE = ((string)(inValues[0]));
            string NOME = ((string)(inValues[1]));
            string CPF = ((string)(inValues[2]));
            string RG = ((string)(inValues[3]));
            string EMISSOR = ((string)(inValues[4]));
            string UF_EMISSAO = ((string)(inValues[5]));
            string SEXO = ((string)(inValues[6]));
            string ESTADO_CIVIL = ((string)(inValues[7]));
            string NOME_MAE = ((string)(inValues[8]));
            string NOME_PAI = ((string)(inValues[9]));
            string UF = ((string)(inValues[10]));
            string CIDADE = ((string)(inValues[11]));
            string DT_EMISSAO = ((string)(inValues[12]));
            string BAIRRO = ((string)(inValues[13]));
            string PONTO_REFERENCIA = ((string)(inValues[14]));
            string TIPO_LOGRADOURO = ((string)(inValues[15]));
            string END_NUM = ((string)(inValues[16]));
            string DESC_LOGRADOURO = ((string)(inValues[17]));
            string USER_CADASTRO = ((string)(inValues[18]));
            string EMAIL = ((string)(inValues[19]));
            string TIPO_DOC = ((string)(inValues[20]));
            string QT_DEPENDENTES = ((string)(inValues[21]));
            string FILIAL_CAD = ((string)(inValues[22]));
            string DATA_NASCIMENTO = ((string)(inValues[23]));
            string PROFISSAO = ((string)(inValues[24]));
            string CEP = ((string)(inValues[25]));
            string DTCADASTRO = ((string)(inValues[26]));
            return ((ClinVitta.ServiceControleCadCliente.ControleDb_CadastroClienteSoap)(this)).BeginIncluirCadastroClienteCabecalho(CODPACIENTE, NOME, CPF, RG, EMISSOR, UF_EMISSAO, SEXO, ESTADO_CIVIL, NOME_MAE, NOME_PAI, UF, CIDADE, DT_EMISSAO, BAIRRO, PONTO_REFERENCIA, TIPO_LOGRADOURO, END_NUM, DESC_LOGRADOURO, USER_CADASTRO, EMAIL, TIPO_DOC, QT_DEPENDENTES, FILIAL_CAD, DATA_NASCIMENTO, PROFISSAO, CEP, DTCADASTRO, callback, asyncState);
        }
        
        private object[] OnEndIncluirCadastroClienteCabecalho(System.IAsyncResult result) {
            int retVal = ((ClinVitta.ServiceControleCadCliente.ControleDb_CadastroClienteSoap)(this)).EndIncluirCadastroClienteCabecalho(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncluirCadastroClienteCabecalhoCompleted(object state) {
            if ((this.IncluirCadastroClienteCabecalhoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IncluirCadastroClienteCabecalhoCompleted(this, new IncluirCadastroClienteCabecalhoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IncluirCadastroClienteCabecalhoAsync(
                    string CODPACIENTE, 
                    string NOME, 
                    string CPF, 
                    string RG, 
                    string EMISSOR, 
                    string UF_EMISSAO, 
                    string SEXO, 
                    string ESTADO_CIVIL, 
                    string NOME_MAE, 
                    string NOME_PAI, 
                    string UF, 
                    string CIDADE, 
                    string DT_EMISSAO, 
                    string BAIRRO, 
                    string PONTO_REFERENCIA, 
                    string TIPO_LOGRADOURO, 
                    string END_NUM, 
                    string DESC_LOGRADOURO, 
                    string USER_CADASTRO, 
                    string EMAIL, 
                    string TIPO_DOC, 
                    string QT_DEPENDENTES, 
                    string FILIAL_CAD, 
                    string DATA_NASCIMENTO, 
                    string PROFISSAO, 
                    string CEP, 
                    string DTCADASTRO) {
            this.IncluirCadastroClienteCabecalhoAsync(CODPACIENTE, NOME, CPF, RG, EMISSOR, UF_EMISSAO, SEXO, ESTADO_CIVIL, NOME_MAE, NOME_PAI, UF, CIDADE, DT_EMISSAO, BAIRRO, PONTO_REFERENCIA, TIPO_LOGRADOURO, END_NUM, DESC_LOGRADOURO, USER_CADASTRO, EMAIL, TIPO_DOC, QT_DEPENDENTES, FILIAL_CAD, DATA_NASCIMENTO, PROFISSAO, CEP, DTCADASTRO, null);
        }
        
        public void IncluirCadastroClienteCabecalhoAsync(
                    string CODPACIENTE, 
                    string NOME, 
                    string CPF, 
                    string RG, 
                    string EMISSOR, 
                    string UF_EMISSAO, 
                    string SEXO, 
                    string ESTADO_CIVIL, 
                    string NOME_MAE, 
                    string NOME_PAI, 
                    string UF, 
                    string CIDADE, 
                    string DT_EMISSAO, 
                    string BAIRRO, 
                    string PONTO_REFERENCIA, 
                    string TIPO_LOGRADOURO, 
                    string END_NUM, 
                    string DESC_LOGRADOURO, 
                    string USER_CADASTRO, 
                    string EMAIL, 
                    string TIPO_DOC, 
                    string QT_DEPENDENTES, 
                    string FILIAL_CAD, 
                    string DATA_NASCIMENTO, 
                    string PROFISSAO, 
                    string CEP, 
                    string DTCADASTRO, 
                    object userState) {
            if ((this.onBeginIncluirCadastroClienteCabecalhoDelegate == null)) {
                this.onBeginIncluirCadastroClienteCabecalhoDelegate = new BeginOperationDelegate(this.OnBeginIncluirCadastroClienteCabecalho);
            }
            if ((this.onEndIncluirCadastroClienteCabecalhoDelegate == null)) {
                this.onEndIncluirCadastroClienteCabecalhoDelegate = new EndOperationDelegate(this.OnEndIncluirCadastroClienteCabecalho);
            }
            if ((this.onIncluirCadastroClienteCabecalhoCompletedDelegate == null)) {
                this.onIncluirCadastroClienteCabecalhoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncluirCadastroClienteCabecalhoCompleted);
            }
            base.InvokeAsync(this.onBeginIncluirCadastroClienteCabecalhoDelegate, new object[] {
                        CODPACIENTE,
                        NOME,
                        CPF,
                        RG,
                        EMISSOR,
                        UF_EMISSAO,
                        SEXO,
                        ESTADO_CIVIL,
                        NOME_MAE,
                        NOME_PAI,
                        UF,
                        CIDADE,
                        DT_EMISSAO,
                        BAIRRO,
                        PONTO_REFERENCIA,
                        TIPO_LOGRADOURO,
                        END_NUM,
                        DESC_LOGRADOURO,
                        USER_CADASTRO,
                        EMAIL,
                        TIPO_DOC,
                        QT_DEPENDENTES,
                        FILIAL_CAD,
                        DATA_NASCIMENTO,
                        PROFISSAO,
                        CEP,
                        DTCADASTRO}, this.onEndIncluirCadastroClienteCabecalhoDelegate, this.onIncluirCadastroClienteCabecalhoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClinVitta.ServiceControleCadCliente.ControleDb_CadastroClienteSoap.BeginAlterarCadastroClienteCabecalho(
                    string CODPACIENTE, 
                    string NOME, 
                    string CPF, 
                    string RG, 
                    string EMISSOR, 
                    string UF_EMISSAO, 
                    string SEXO, 
                    string ESTADO_CIVIL, 
                    string NOME_MAE, 
                    string NOME_PAI, 
                    string UF, 
                    string CIDADE, 
                    string DT_EMISSAO, 
                    string BAIRRO, 
                    string PONTO_REFERENCIA, 
                    string TIPO_LOGRADOURO, 
                    string END_NUM, 
                    string DESC_LOGRADOURO, 
                    string USER_CADASTRO, 
                    string EMAIL, 
                    string TIPO_DOC, 
                    string QT_DEPENDENTES, 
                    string FILIAL_CAD, 
                    string DATA_NASCIMENTO, 
                    string PROFISSAO, 
                    string CEP, 
                    string DTCADASTRO, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginAlterarCadastroClienteCabecalho(CODPACIENTE, NOME, CPF, RG, EMISSOR, UF_EMISSAO, SEXO, ESTADO_CIVIL, NOME_MAE, NOME_PAI, UF, CIDADE, DT_EMISSAO, BAIRRO, PONTO_REFERENCIA, TIPO_LOGRADOURO, END_NUM, DESC_LOGRADOURO, USER_CADASTRO, EMAIL, TIPO_DOC, QT_DEPENDENTES, FILIAL_CAD, DATA_NASCIMENTO, PROFISSAO, CEP, DTCADASTRO, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int ClinVitta.ServiceControleCadCliente.ControleDb_CadastroClienteSoap.EndAlterarCadastroClienteCabecalho(System.IAsyncResult result) {
            return base.Channel.EndAlterarCadastroClienteCabecalho(result);
        }
        
        private System.IAsyncResult OnBeginAlterarCadastroClienteCabecalho(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string CODPACIENTE = ((string)(inValues[0]));
            string NOME = ((string)(inValues[1]));
            string CPF = ((string)(inValues[2]));
            string RG = ((string)(inValues[3]));
            string EMISSOR = ((string)(inValues[4]));
            string UF_EMISSAO = ((string)(inValues[5]));
            string SEXO = ((string)(inValues[6]));
            string ESTADO_CIVIL = ((string)(inValues[7]));
            string NOME_MAE = ((string)(inValues[8]));
            string NOME_PAI = ((string)(inValues[9]));
            string UF = ((string)(inValues[10]));
            string CIDADE = ((string)(inValues[11]));
            string DT_EMISSAO = ((string)(inValues[12]));
            string BAIRRO = ((string)(inValues[13]));
            string PONTO_REFERENCIA = ((string)(inValues[14]));
            string TIPO_LOGRADOURO = ((string)(inValues[15]));
            string END_NUM = ((string)(inValues[16]));
            string DESC_LOGRADOURO = ((string)(inValues[17]));
            string USER_CADASTRO = ((string)(inValues[18]));
            string EMAIL = ((string)(inValues[19]));
            string TIPO_DOC = ((string)(inValues[20]));
            string QT_DEPENDENTES = ((string)(inValues[21]));
            string FILIAL_CAD = ((string)(inValues[22]));
            string DATA_NASCIMENTO = ((string)(inValues[23]));
            string PROFISSAO = ((string)(inValues[24]));
            string CEP = ((string)(inValues[25]));
            string DTCADASTRO = ((string)(inValues[26]));
            return ((ClinVitta.ServiceControleCadCliente.ControleDb_CadastroClienteSoap)(this)).BeginAlterarCadastroClienteCabecalho(CODPACIENTE, NOME, CPF, RG, EMISSOR, UF_EMISSAO, SEXO, ESTADO_CIVIL, NOME_MAE, NOME_PAI, UF, CIDADE, DT_EMISSAO, BAIRRO, PONTO_REFERENCIA, TIPO_LOGRADOURO, END_NUM, DESC_LOGRADOURO, USER_CADASTRO, EMAIL, TIPO_DOC, QT_DEPENDENTES, FILIAL_CAD, DATA_NASCIMENTO, PROFISSAO, CEP, DTCADASTRO, callback, asyncState);
        }
        
        private object[] OnEndAlterarCadastroClienteCabecalho(System.IAsyncResult result) {
            int retVal = ((ClinVitta.ServiceControleCadCliente.ControleDb_CadastroClienteSoap)(this)).EndAlterarCadastroClienteCabecalho(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAlterarCadastroClienteCabecalhoCompleted(object state) {
            if ((this.AlterarCadastroClienteCabecalhoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AlterarCadastroClienteCabecalhoCompleted(this, new AlterarCadastroClienteCabecalhoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AlterarCadastroClienteCabecalhoAsync(
                    string CODPACIENTE, 
                    string NOME, 
                    string CPF, 
                    string RG, 
                    string EMISSOR, 
                    string UF_EMISSAO, 
                    string SEXO, 
                    string ESTADO_CIVIL, 
                    string NOME_MAE, 
                    string NOME_PAI, 
                    string UF, 
                    string CIDADE, 
                    string DT_EMISSAO, 
                    string BAIRRO, 
                    string PONTO_REFERENCIA, 
                    string TIPO_LOGRADOURO, 
                    string END_NUM, 
                    string DESC_LOGRADOURO, 
                    string USER_CADASTRO, 
                    string EMAIL, 
                    string TIPO_DOC, 
                    string QT_DEPENDENTES, 
                    string FILIAL_CAD, 
                    string DATA_NASCIMENTO, 
                    string PROFISSAO, 
                    string CEP, 
                    string DTCADASTRO) {
            this.AlterarCadastroClienteCabecalhoAsync(CODPACIENTE, NOME, CPF, RG, EMISSOR, UF_EMISSAO, SEXO, ESTADO_CIVIL, NOME_MAE, NOME_PAI, UF, CIDADE, DT_EMISSAO, BAIRRO, PONTO_REFERENCIA, TIPO_LOGRADOURO, END_NUM, DESC_LOGRADOURO, USER_CADASTRO, EMAIL, TIPO_DOC, QT_DEPENDENTES, FILIAL_CAD, DATA_NASCIMENTO, PROFISSAO, CEP, DTCADASTRO, null);
        }
        
        public void AlterarCadastroClienteCabecalhoAsync(
                    string CODPACIENTE, 
                    string NOME, 
                    string CPF, 
                    string RG, 
                    string EMISSOR, 
                    string UF_EMISSAO, 
                    string SEXO, 
                    string ESTADO_CIVIL, 
                    string NOME_MAE, 
                    string NOME_PAI, 
                    string UF, 
                    string CIDADE, 
                    string DT_EMISSAO, 
                    string BAIRRO, 
                    string PONTO_REFERENCIA, 
                    string TIPO_LOGRADOURO, 
                    string END_NUM, 
                    string DESC_LOGRADOURO, 
                    string USER_CADASTRO, 
                    string EMAIL, 
                    string TIPO_DOC, 
                    string QT_DEPENDENTES, 
                    string FILIAL_CAD, 
                    string DATA_NASCIMENTO, 
                    string PROFISSAO, 
                    string CEP, 
                    string DTCADASTRO, 
                    object userState) {
            if ((this.onBeginAlterarCadastroClienteCabecalhoDelegate == null)) {
                this.onBeginAlterarCadastroClienteCabecalhoDelegate = new BeginOperationDelegate(this.OnBeginAlterarCadastroClienteCabecalho);
            }
            if ((this.onEndAlterarCadastroClienteCabecalhoDelegate == null)) {
                this.onEndAlterarCadastroClienteCabecalhoDelegate = new EndOperationDelegate(this.OnEndAlterarCadastroClienteCabecalho);
            }
            if ((this.onAlterarCadastroClienteCabecalhoCompletedDelegate == null)) {
                this.onAlterarCadastroClienteCabecalhoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAlterarCadastroClienteCabecalhoCompleted);
            }
            base.InvokeAsync(this.onBeginAlterarCadastroClienteCabecalhoDelegate, new object[] {
                        CODPACIENTE,
                        NOME,
                        CPF,
                        RG,
                        EMISSOR,
                        UF_EMISSAO,
                        SEXO,
                        ESTADO_CIVIL,
                        NOME_MAE,
                        NOME_PAI,
                        UF,
                        CIDADE,
                        DT_EMISSAO,
                        BAIRRO,
                        PONTO_REFERENCIA,
                        TIPO_LOGRADOURO,
                        END_NUM,
                        DESC_LOGRADOURO,
                        USER_CADASTRO,
                        EMAIL,
                        TIPO_DOC,
                        QT_DEPENDENTES,
                        FILIAL_CAD,
                        DATA_NASCIMENTO,
                        PROFISSAO,
                        CEP,
                        DTCADASTRO}, this.onEndAlterarCadastroClienteCabecalhoDelegate, this.onAlterarCadastroClienteCabecalhoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClinVitta.ServiceControleCadCliente.ControleDb_CadastroClienteSoap.BeginExcluirCadastroCliente(string CODPACIENTE, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExcluirCadastroCliente(CODPACIENTE, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ClinVitta.ServiceControleCadCliente.ControleDb_CadastroClienteSoap.EndExcluirCadastroCliente(System.IAsyncResult result) {
            base.Channel.EndExcluirCadastroCliente(result);
        }
        
        private System.IAsyncResult OnBeginExcluirCadastroCliente(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string CODPACIENTE = ((string)(inValues[0]));
            return ((ClinVitta.ServiceControleCadCliente.ControleDb_CadastroClienteSoap)(this)).BeginExcluirCadastroCliente(CODPACIENTE, callback, asyncState);
        }
        
        private object[] OnEndExcluirCadastroCliente(System.IAsyncResult result) {
            ((ClinVitta.ServiceControleCadCliente.ControleDb_CadastroClienteSoap)(this)).EndExcluirCadastroCliente(result);
            return null;
        }
        
        private void OnExcluirCadastroClienteCompleted(object state) {
            if ((this.ExcluirCadastroClienteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExcluirCadastroClienteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExcluirCadastroClienteAsync(string CODPACIENTE) {
            this.ExcluirCadastroClienteAsync(CODPACIENTE, null);
        }
        
        public void ExcluirCadastroClienteAsync(string CODPACIENTE, object userState) {
            if ((this.onBeginExcluirCadastroClienteDelegate == null)) {
                this.onBeginExcluirCadastroClienteDelegate = new BeginOperationDelegate(this.OnBeginExcluirCadastroCliente);
            }
            if ((this.onEndExcluirCadastroClienteDelegate == null)) {
                this.onEndExcluirCadastroClienteDelegate = new EndOperationDelegate(this.OnEndExcluirCadastroCliente);
            }
            if ((this.onExcluirCadastroClienteCompletedDelegate == null)) {
                this.onExcluirCadastroClienteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExcluirCadastroClienteCompleted);
            }
            base.InvokeAsync(this.onBeginExcluirCadastroClienteDelegate, new object[] {
                        CODPACIENTE}, this.onEndExcluirCadastroClienteDelegate, this.onExcluirCadastroClienteCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClinVitta.ServiceControleCadCliente.ControleDb_CadastroClienteSoap.Beginincluir_TELEFONE(string TELCODPACIENTE, string TIPO, string DDD, string NUMERO, System.AsyncCallback callback, object asyncState) {
            return base.Channel.Beginincluir_TELEFONE(TELCODPACIENTE, TIPO, DDD, NUMERO, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int ClinVitta.ServiceControleCadCliente.ControleDb_CadastroClienteSoap.Endincluir_TELEFONE(System.IAsyncResult result) {
            return base.Channel.Endincluir_TELEFONE(result);
        }
        
        private System.IAsyncResult OnBeginincluir_TELEFONE(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string TELCODPACIENTE = ((string)(inValues[0]));
            string TIPO = ((string)(inValues[1]));
            string DDD = ((string)(inValues[2]));
            string NUMERO = ((string)(inValues[3]));
            return ((ClinVitta.ServiceControleCadCliente.ControleDb_CadastroClienteSoap)(this)).Beginincluir_TELEFONE(TELCODPACIENTE, TIPO, DDD, NUMERO, callback, asyncState);
        }
        
        private object[] OnEndincluir_TELEFONE(System.IAsyncResult result) {
            int retVal = ((ClinVitta.ServiceControleCadCliente.ControleDb_CadastroClienteSoap)(this)).Endincluir_TELEFONE(result);
            return new object[] {
                    retVal};
        }
        
        private void Onincluir_TELEFONECompleted(object state) {
            if ((this.incluir_TELEFONECompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.incluir_TELEFONECompleted(this, new incluir_TELEFONECompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void incluir_TELEFONEAsync(string TELCODPACIENTE, string TIPO, string DDD, string NUMERO) {
            this.incluir_TELEFONEAsync(TELCODPACIENTE, TIPO, DDD, NUMERO, null);
        }
        
        public void incluir_TELEFONEAsync(string TELCODPACIENTE, string TIPO, string DDD, string NUMERO, object userState) {
            if ((this.onBeginincluir_TELEFONEDelegate == null)) {
                this.onBeginincluir_TELEFONEDelegate = new BeginOperationDelegate(this.OnBeginincluir_TELEFONE);
            }
            if ((this.onEndincluir_TELEFONEDelegate == null)) {
                this.onEndincluir_TELEFONEDelegate = new EndOperationDelegate(this.OnEndincluir_TELEFONE);
            }
            if ((this.onincluir_TELEFONECompletedDelegate == null)) {
                this.onincluir_TELEFONECompletedDelegate = new System.Threading.SendOrPostCallback(this.Onincluir_TELEFONECompleted);
            }
            base.InvokeAsync(this.onBeginincluir_TELEFONEDelegate, new object[] {
                        TELCODPACIENTE,
                        TIPO,
                        DDD,
                        NUMERO}, this.onEndincluir_TELEFONEDelegate, this.onincluir_TELEFONECompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClinVitta.ServiceControleCadCliente.ControleDb_CadastroClienteSoap.BeginAlterar_TELEFONE(string CODPACIENTE, string TIPO, string DDD, string NUMERO, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAlterar_TELEFONE(CODPACIENTE, TIPO, DDD, NUMERO, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int ClinVitta.ServiceControleCadCliente.ControleDb_CadastroClienteSoap.EndAlterar_TELEFONE(System.IAsyncResult result) {
            return base.Channel.EndAlterar_TELEFONE(result);
        }
        
        private System.IAsyncResult OnBeginAlterar_TELEFONE(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string CODPACIENTE = ((string)(inValues[0]));
            string TIPO = ((string)(inValues[1]));
            string DDD = ((string)(inValues[2]));
            string NUMERO = ((string)(inValues[3]));
            return ((ClinVitta.ServiceControleCadCliente.ControleDb_CadastroClienteSoap)(this)).BeginAlterar_TELEFONE(CODPACIENTE, TIPO, DDD, NUMERO, callback, asyncState);
        }
        
        private object[] OnEndAlterar_TELEFONE(System.IAsyncResult result) {
            int retVal = ((ClinVitta.ServiceControleCadCliente.ControleDb_CadastroClienteSoap)(this)).EndAlterar_TELEFONE(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAlterar_TELEFONECompleted(object state) {
            if ((this.Alterar_TELEFONECompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Alterar_TELEFONECompleted(this, new Alterar_TELEFONECompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Alterar_TELEFONEAsync(string CODPACIENTE, string TIPO, string DDD, string NUMERO) {
            this.Alterar_TELEFONEAsync(CODPACIENTE, TIPO, DDD, NUMERO, null);
        }
        
        public void Alterar_TELEFONEAsync(string CODPACIENTE, string TIPO, string DDD, string NUMERO, object userState) {
            if ((this.onBeginAlterar_TELEFONEDelegate == null)) {
                this.onBeginAlterar_TELEFONEDelegate = new BeginOperationDelegate(this.OnBeginAlterar_TELEFONE);
            }
            if ((this.onEndAlterar_TELEFONEDelegate == null)) {
                this.onEndAlterar_TELEFONEDelegate = new EndOperationDelegate(this.OnEndAlterar_TELEFONE);
            }
            if ((this.onAlterar_TELEFONECompletedDelegate == null)) {
                this.onAlterar_TELEFONECompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAlterar_TELEFONECompleted);
            }
            base.InvokeAsync(this.onBeginAlterar_TELEFONEDelegate, new object[] {
                        CODPACIENTE,
                        TIPO,
                        DDD,
                        NUMERO}, this.onEndAlterar_TELEFONEDelegate, this.onAlterar_TELEFONECompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClinVitta.ServiceControleCadCliente.ControleDb_CadastroClienteSoap.BeginEXCLUIR_TELEFONE(string CODPACIENTE, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEXCLUIR_TELEFONE(CODPACIENTE, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int ClinVitta.ServiceControleCadCliente.ControleDb_CadastroClienteSoap.EndEXCLUIR_TELEFONE(System.IAsyncResult result) {
            return base.Channel.EndEXCLUIR_TELEFONE(result);
        }
        
        private System.IAsyncResult OnBeginEXCLUIR_TELEFONE(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string CODPACIENTE = ((string)(inValues[0]));
            return ((ClinVitta.ServiceControleCadCliente.ControleDb_CadastroClienteSoap)(this)).BeginEXCLUIR_TELEFONE(CODPACIENTE, callback, asyncState);
        }
        
        private object[] OnEndEXCLUIR_TELEFONE(System.IAsyncResult result) {
            int retVal = ((ClinVitta.ServiceControleCadCliente.ControleDb_CadastroClienteSoap)(this)).EndEXCLUIR_TELEFONE(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEXCLUIR_TELEFONECompleted(object state) {
            if ((this.EXCLUIR_TELEFONECompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EXCLUIR_TELEFONECompleted(this, new EXCLUIR_TELEFONECompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EXCLUIR_TELEFONEAsync(string CODPACIENTE) {
            this.EXCLUIR_TELEFONEAsync(CODPACIENTE, null);
        }
        
        public void EXCLUIR_TELEFONEAsync(string CODPACIENTE, object userState) {
            if ((this.onBeginEXCLUIR_TELEFONEDelegate == null)) {
                this.onBeginEXCLUIR_TELEFONEDelegate = new BeginOperationDelegate(this.OnBeginEXCLUIR_TELEFONE);
            }
            if ((this.onEndEXCLUIR_TELEFONEDelegate == null)) {
                this.onEndEXCLUIR_TELEFONEDelegate = new EndOperationDelegate(this.OnEndEXCLUIR_TELEFONE);
            }
            if ((this.onEXCLUIR_TELEFONECompletedDelegate == null)) {
                this.onEXCLUIR_TELEFONECompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEXCLUIR_TELEFONECompleted);
            }
            base.InvokeAsync(this.onBeginEXCLUIR_TELEFONEDelegate, new object[] {
                        CODPACIENTE}, this.onEndEXCLUIR_TELEFONEDelegate, this.onEXCLUIR_TELEFONECompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override ClinVitta.ServiceControleCadCliente.ControleDb_CadastroClienteSoap CreateChannel() {
            return new ControleDb_CadastroClienteSoapClientChannel(this);
        }
        
        private class ControleDb_CadastroClienteSoapClientChannel : ChannelBase<ClinVitta.ServiceControleCadCliente.ControleDb_CadastroClienteSoap>, ClinVitta.ServiceControleCadCliente.ControleDb_CadastroClienteSoap {
            
            public ControleDb_CadastroClienteSoapClientChannel(System.ServiceModel.ClientBase<ClinVitta.ServiceControleCadCliente.ControleDb_CadastroClienteSoap> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginIncluirCadastroClienteCabecalho(
                        string CODPACIENTE, 
                        string NOME, 
                        string CPF, 
                        string RG, 
                        string EMISSOR, 
                        string UF_EMISSAO, 
                        string SEXO, 
                        string ESTADO_CIVIL, 
                        string NOME_MAE, 
                        string NOME_PAI, 
                        string UF, 
                        string CIDADE, 
                        string DT_EMISSAO, 
                        string BAIRRO, 
                        string PONTO_REFERENCIA, 
                        string TIPO_LOGRADOURO, 
                        string END_NUM, 
                        string DESC_LOGRADOURO, 
                        string USER_CADASTRO, 
                        string EMAIL, 
                        string TIPO_DOC, 
                        string QT_DEPENDENTES, 
                        string FILIAL_CAD, 
                        string DATA_NASCIMENTO, 
                        string PROFISSAO, 
                        string CEP, 
                        string DTCADASTRO, 
                        System.AsyncCallback callback, 
                        object asyncState) {
                object[] _args = new object[27];
                _args[0] = CODPACIENTE;
                _args[1] = NOME;
                _args[2] = CPF;
                _args[3] = RG;
                _args[4] = EMISSOR;
                _args[5] = UF_EMISSAO;
                _args[6] = SEXO;
                _args[7] = ESTADO_CIVIL;
                _args[8] = NOME_MAE;
                _args[9] = NOME_PAI;
                _args[10] = UF;
                _args[11] = CIDADE;
                _args[12] = DT_EMISSAO;
                _args[13] = BAIRRO;
                _args[14] = PONTO_REFERENCIA;
                _args[15] = TIPO_LOGRADOURO;
                _args[16] = END_NUM;
                _args[17] = DESC_LOGRADOURO;
                _args[18] = USER_CADASTRO;
                _args[19] = EMAIL;
                _args[20] = TIPO_DOC;
                _args[21] = QT_DEPENDENTES;
                _args[22] = FILIAL_CAD;
                _args[23] = DATA_NASCIMENTO;
                _args[24] = PROFISSAO;
                _args[25] = CEP;
                _args[26] = DTCADASTRO;
                System.IAsyncResult _result = base.BeginInvoke("IncluirCadastroClienteCabecalho", _args, callback, asyncState);
                return _result;
            }
            
            public int EndIncluirCadastroClienteCabecalho(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("IncluirCadastroClienteCabecalho", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAlterarCadastroClienteCabecalho(
                        string CODPACIENTE, 
                        string NOME, 
                        string CPF, 
                        string RG, 
                        string EMISSOR, 
                        string UF_EMISSAO, 
                        string SEXO, 
                        string ESTADO_CIVIL, 
                        string NOME_MAE, 
                        string NOME_PAI, 
                        string UF, 
                        string CIDADE, 
                        string DT_EMISSAO, 
                        string BAIRRO, 
                        string PONTO_REFERENCIA, 
                        string TIPO_LOGRADOURO, 
                        string END_NUM, 
                        string DESC_LOGRADOURO, 
                        string USER_CADASTRO, 
                        string EMAIL, 
                        string TIPO_DOC, 
                        string QT_DEPENDENTES, 
                        string FILIAL_CAD, 
                        string DATA_NASCIMENTO, 
                        string PROFISSAO, 
                        string CEP, 
                        string DTCADASTRO, 
                        System.AsyncCallback callback, 
                        object asyncState) {
                object[] _args = new object[27];
                _args[0] = CODPACIENTE;
                _args[1] = NOME;
                _args[2] = CPF;
                _args[3] = RG;
                _args[4] = EMISSOR;
                _args[5] = UF_EMISSAO;
                _args[6] = SEXO;
                _args[7] = ESTADO_CIVIL;
                _args[8] = NOME_MAE;
                _args[9] = NOME_PAI;
                _args[10] = UF;
                _args[11] = CIDADE;
                _args[12] = DT_EMISSAO;
                _args[13] = BAIRRO;
                _args[14] = PONTO_REFERENCIA;
                _args[15] = TIPO_LOGRADOURO;
                _args[16] = END_NUM;
                _args[17] = DESC_LOGRADOURO;
                _args[18] = USER_CADASTRO;
                _args[19] = EMAIL;
                _args[20] = TIPO_DOC;
                _args[21] = QT_DEPENDENTES;
                _args[22] = FILIAL_CAD;
                _args[23] = DATA_NASCIMENTO;
                _args[24] = PROFISSAO;
                _args[25] = CEP;
                _args[26] = DTCADASTRO;
                System.IAsyncResult _result = base.BeginInvoke("AlterarCadastroClienteCabecalho", _args, callback, asyncState);
                return _result;
            }
            
            public int EndAlterarCadastroClienteCabecalho(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("AlterarCadastroClienteCabecalho", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginExcluirCadastroCliente(string CODPACIENTE, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = CODPACIENTE;
                System.IAsyncResult _result = base.BeginInvoke("ExcluirCadastroCliente", _args, callback, asyncState);
                return _result;
            }
            
            public void EndExcluirCadastroCliente(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ExcluirCadastroCliente", _args, result);
            }
            
            public System.IAsyncResult Beginincluir_TELEFONE(string TELCODPACIENTE, string TIPO, string DDD, string NUMERO, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = TELCODPACIENTE;
                _args[1] = TIPO;
                _args[2] = DDD;
                _args[3] = NUMERO;
                System.IAsyncResult _result = base.BeginInvoke("incluir_TELEFONE", _args, callback, asyncState);
                return _result;
            }
            
            public int Endincluir_TELEFONE(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("incluir_TELEFONE", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAlterar_TELEFONE(string CODPACIENTE, string TIPO, string DDD, string NUMERO, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = CODPACIENTE;
                _args[1] = TIPO;
                _args[2] = DDD;
                _args[3] = NUMERO;
                System.IAsyncResult _result = base.BeginInvoke("Alterar_TELEFONE", _args, callback, asyncState);
                return _result;
            }
            
            public int EndAlterar_TELEFONE(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("Alterar_TELEFONE", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEXCLUIR_TELEFONE(string CODPACIENTE, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = CODPACIENTE;
                System.IAsyncResult _result = base.BeginInvoke("EXCLUIR_TELEFONE", _args, callback, asyncState);
                return _result;
            }
            
            public int EndEXCLUIR_TELEFONE(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("EXCLUIR_TELEFONE", _args, result)));
                return _result;
            }
        }
    }
}
